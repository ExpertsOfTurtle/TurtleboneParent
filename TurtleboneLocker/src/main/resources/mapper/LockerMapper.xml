<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.turtlebone.locker.repository.LockerRepository" >
  <resultMap id="BaseResultMap" type="com.turtlebone.locker.entity.Locker" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="category" property="category" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="location" property="location" jdbcType="VARCHAR" />
    <result column="updatetime" property="updatetime" jdbcType="TIMESTAMP" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
  </resultMap>

 <sql id="Base_Column_List" >
   `id`,
   `category`,
   `name`,
   `location`,
   `updatetime`,
   `createtime`
 </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from locker
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from locker
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  <insert id="insert" parameterType="com.turtlebone.locker.entity.Locker" 
  useGeneratedKeys="true" keyProperty="id">
    insert into locker ( 
     `id`,
     `category`,
     `name`,
     `location`
    )
    values (
     #{id,jdbcType=INTEGER},
     #{category,jdbcType=VARCHAR},
     #{name,jdbcType=VARCHAR},
     #{location,jdbcType=VARCHAR}
 )
  </insert>
  
  <insert id="insertSelective" parameterType="com.turtlebone.locker.entity.Locker" >
    insert into locker
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        `id`,
      </if>
      <if test="category != null" >
        `category`,
      </if>
      <if test="name != null" >
        `name`,
      </if>
      <if test="location != null" >
        `location`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="category != null" >
        #{category,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="location != null" >
        #{location,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  
  <update id="updateByPrimaryKeySelective" parameterType="com.turtlebone.locker.entity.Locker" >
    update locker
	  <set>
       <if test="category != null" >
        `category`= #{category,jdbcType=VARCHAR},
       </if>
       <if test="name != null" >
        `name`= #{name,jdbcType=VARCHAR},
       </if>
       <if test="location != null" >
        `location`= #{location,jdbcType=VARCHAR},
       </if>
          </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <update id="updateByPrimaryKey" parameterType="com.turtlebone.locker.entity.Locker" >
    update locker
    set 
       `category` = #{category,jdbcType=VARCHAR},
       `name` = #{name,jdbcType=VARCHAR},
       `location` = #{location,jdbcType=VARCHAR}
     where id = #{id,jdbcType=INTEGER}
  </update>
  

  
  <select id="selectCount" resultType="java.lang.Integer" parameterType="com.turtlebone.locker.entity.Locker" >
    select count(*) from locker
    <where >
            <if test="id != null" >
        and `id` = #{id,jdbcType=INTEGER}
      </if>
            <if test="category != null" >
        and `category` = #{category,jdbcType=VARCHAR}
      </if>
            <if test="name != null" >
        and `name` = #{name,jdbcType=VARCHAR}
      </if>
            <if test="location != null" >
        and `location` = #{location,jdbcType=VARCHAR}
      </if>
          </where>
  </select>

    <select id="selectPage" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from locker where 1 = 1 
        <if test="locker.id != null" >
      and `id` = #{locker.id,jdbcType=INTEGER}
    </if>
        <if test="locker.category != null" >
      and `category` = #{locker.category,jdbcType=VARCHAR}
    </if>
        <if test="locker.name != null" >
      and `name` = #{locker.name,jdbcType=VARCHAR}
    </if>
        <if test="locker.location != null" >
      and `location` = #{locker.location,jdbcType=VARCHAR}
    </if>
        <if test="pageable.sort != null" >
      order by 
      <foreach collection="pageable.sort" item="order" separator="," >
        <if test="
   order.property == 'id' 
   || order.property == 'category'
   || order.property == 'name'
   || order.property == 'location'
   || order.property == 'updatetime'
   || order.property == 'createtime'
        " >
        		${order.property} ${order.direction}
        </if>
      </foreach>
    </if>
    <if test="pageable.offset >= 0 and pageable.pageSize > 0" >
      limit ${pageable.offset}, ${pageable.pageSize}
    </if>
  </select>
 </mapper>
  

  
	